// ============================================================================
// Sweep Configuration Macro
// ============================================================================

/// Macro that generates a complete sweep configuration setup for a simulation.
/// 
/// This macro eliminates boilerplate code by automatically generating:
/// - A sweep config struct with standard fields (network_config, account_config, transaction_config, sweep)
/// - Standard validation logic (common field validation, positive simulation count)
/// - SweepConfigTrait implementation for integration with the generic SweepRunner
/// - A load_config() function that reads and validates the TOML configuration file
/// 
/// # Parameters
/// 
/// * `$dir_name` - The directory name for the sweep (e.g., "sim_sweep_cat_rate")
/// * `$config_name` - The name of the config struct to generate (e.g., SweepCatRateConfig)
/// * `validate_sweep_specific` - A closure that implements sweep-specific validation logic
/// 
/// # Generated Code
/// 
/// For each macro call, this generates:
/// 1. A struct with standard sweep configuration fields
/// 2. ValidateConfig implementation with common validation + custom validation
/// 3. SweepConfigTrait implementation for generic sweep runner compatibility
/// 4. A load_config() function that reads the TOML file and validates it
/// 
/// # Usage Examples
/// 
/// **New format with custom sweep parameters:**
/// ```rust
/// define_sweep_config!(
///     "sim_sweep_cat_rate",
///     SweepCatRateConfig,
///     validate_sweep_specific = |self_: &Self| {
///         if self_.sweep.cat_rate_step <= 0.0 {
///             return Err(ConfigError::ValidationError("CAT rate step must be positive".into()));
///         }
///         Ok(())
///     }
/// );
/// ```
/// 
/// **Old format with generic sweep parameters:**
/// ```rust
/// define_sweep_config!(
///     "sim_sweep_zipf",
///     SweepZipfConfig,
///     validate_sweep_specific = |self_: &Self| {
///         if self_.sweep.zipf_step <= 0.0 {
///             return Err(ConfigError::ValidationError("Zipf step must be positive".into()));
///         }
///         Ok(())
///     }
/// );
/// ```
#[macro_export]
macro_rules! define_sweep_config {
    // Only support the new format with simulation_config
    (
        $dir_name:expr,
        $config_name:ident,
        validate_sweep_specific = $validate_block:expr
    ) => {
        /// Sweep configuration struct generated by define_sweep_config! macro.
        /// Contains all the configuration needed to run a parameter sweep simulation.
        #[derive(Debug, serde::Deserialize, Clone)]
        pub struct $config_name {
            pub network_config: crate::config::NetworkConfig,
            pub account_config: crate::config::AccountConfig,
            pub transaction_config: crate::config::TransactionConfig,
            #[serde(default)]
            pub simulation_config: crate::config::SimulationConfig,
        }

        /// Standard validation implementation for sweep configurations.
        /// Validates common fields and ensures positive simulation count.
        impl crate::config::ValidateConfig for $config_name {
            fn validate_common(&self) -> Result<(), crate::config::ConfigError> {
                crate::config::validate_common_fields(&self.account_config, &self.transaction_config, &self.network_config, &self.simulation_config)?;
                if self.simulation_config.num_simulations.unwrap_or(0) == 0 {
                    return Err(crate::config::ConfigError::ValidationError("Number of simulations must be positive".into()));
                }
                Ok(())
            }
            /// Sweep-specific validation logic provided by the macro caller.
            /// This allows each sweep to define its own validation requirements.
            fn validate_sweep_specific(&self) -> Result<(), crate::config::ConfigError> {
                ($validate_block)(self)
            }
        }

        /// SweepConfigTrait implementation for integration with the generic SweepRunner.
        /// Provides access to configuration data in a type-agnostic way.
        impl crate::scenarios::sweep_runner::SweepConfigTrait for $config_name {
            fn as_any(&self) -> &dyn std::any::Any { self }
            fn get_num_simulations(&self) -> usize { self.simulation_config.num_simulations.unwrap_or(1) }
            fn get_num_runs(&self) -> u32 { self.simulation_config.num_runs }
            fn get_network_config(&self) -> &crate::config::NetworkConfig { &self.network_config }
            fn get_account_config(&self) -> &crate::config::AccountConfig { &self.account_config }
            fn get_transaction_config(&self) -> &crate::config::TransactionConfig { &self.transaction_config }
            fn get_simulation_config(&self) -> Option<&crate::config::SimulationConfig> { Some(&self.simulation_config) }
        }

        /// Loads and validates the sweep configuration from the TOML file.
        /// This function is generated for each sweep and handles file reading,
        /// deserialization, and validation according to the sweep's specific rules.
        fn load_config() -> Result<$config_name, crate::config::ConfigError> {
            use std::fs;
            use toml;
            let config_str = fs::read_to_string(concat!("simulator/src/scenarios/", $dir_name, "/config.toml"))?;
            let config: $config_name = toml::from_str(&config_str)?;
            config.validate()?;
            Ok(config)
        }
    };
} 